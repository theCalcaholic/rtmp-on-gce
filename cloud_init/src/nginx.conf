user root;
worker_processes  auto;
worker_rlimit_nofile 100000;
#error_log  logs/error.log;

events {
  worker_connections  4096;
  #epoll;
}

# RTMP configuration
rtmp {
  server {
    listen 1935; # Listen on standard RTMP port
    chunk_size 4096; 
    ping 30s;
    notify_method get;

    # This application is to accept incoming stream
    application live {
      live on; # Allows live input
      play_restart on;
      on_publish http://simple-auth/publish;

      # for each received stream, transcode for adaptive streaming
      # This single ffmpeg command takes the input and transforms
      # the source into 4 different streams with different bitrates
      # and qualities. # these settings respect the aspect ratio.
      exec_push  /usr/local/bin/ffmpeg -i rtmp://localhost:1935/$app/$name -async 1 -vsync -1
                  -c:v libx264 -vprofile main -c:a aac -b:v 256k  -b:a 64k  -vf "scale=480:trunc(ow/a/2)*2"  -tune zerolatency -preset superfast -crf 23 -f flv rtmp://127.0.0.1:1935/show/$name_low
                  -c:v libx264 -vprofile main -c:a aac -b:v 768k  -b:a 128k -vf "scale=720:trunc(ow/a/2)*2"  -tune zerolatency -preset superfast -crf 23 -f flv rtmp://127.0.0.1:1935/show/$name_mid
                  -c:v libx264 -vprofile main -c:a aac -b:v 1024k -b:a 128k -vf "scale=960:trunc(ow/a/2)*2"  -tune zerolatency -preset superfast -crf 23 -f flv rtmp://127.0.0.1:1935/show/$name_high
                  -c:v libx264 -vprofile main -c:a aac -b:v 1920k -b:a 192k -vf "scale=1280:trunc(ow/a/2)*2" -tune zerolatency -preset superfast -crf 23 -f flv rtmp://127.0.0.1:1935/show/$name_hd720
                  -c copy -f flv rtmp://localhost:1935/show/$name_src 2>> /var/log/nginx/error.log;
      
      publish_notify on;
      record off;
      # record_path /mnt/record/;
      # record_unique on;
      # record_interval 30s;
      #exec_record_done ffmpeg -y -i $path -acodec libmp3lame -ar 44100 -ac 1 -vcodec libx264 $dirname/$basename.mp4;
      #exec_publish_done /scripts/process_recorded.sh $dirname $basename;
      #exec_publish /bin/echo "live / exec_publish" >> /var/log/scripts.log;
      # exec_publish_done bash -c /scripts/process_recorded.sh ${name};

    }

    # This is the HLS application
    application show {
      live on; # Allows live input from above application
      play_restart on;
      allow publish 127.0.0.1;
      deny publish all;
      deny play all; # disable consuming the stream from nginx as rtmp
      
      hls on; # Enable HTTP Live Streaming
      hls_fragment 3;
      hls_playlist_length 60;
      hls_cleanup on;
      #hls_continuous on;
      hls_path /mnt/hls/;  # hls fragments path
      # Instruct clients to adjust resolution according to bandwidth
      hls_variant _src BANDWIDTH=4096000; # Source bitrate, source resolution
      hls_variant _hd720 BANDWIDTH=2048000; # High bitrate, HD 720p resolution
      hls_variant _high BANDWIDTH=1152000; # High bitrate, higher-than-SD resolution
      hls_variant _mid BANDWIDTH=448000; # Medium bitrate, SD resolution
      hls_variant _low BANDWIDTH=288000; # Low bitrate, sub-SD resolution
      
      # MPEG-DASH
      dash on;
      dash_path /mnt/dash/;  # dash fragments path
      dash_fragment 3;
      dash_playlist_length 30;			
      exec_publish /bin/echo "show / exec_publish" >> /var/log/scripts.log;
      exec_publish_done /bin/echo "show / exec_publish_done" >> /var/log/scripts.log;
    }
  }
}


http {
  sendfile off;
  tcp_nopush on;
  directio 512;
  # aio on;
  open_file_cache max=200000 inactive=20s;
  open_file_cache_valid 30s;
  open_file_cache_min_uses 2;
  open_file_cache_errors on;
  gzip on;
  gzip_min_length 10240;
  gzip_comp_level 1;
  gzip_vary on;
  gzip_disable msie6;
  gzip_proxied expired no-cache no-store private auth;
  gzip_types
    text/css
    text/javascript
    text/xml
    text/plain
    text/x-component
    application/javascript
    application/x-javascript
    application/json
    application/xml
    application/rss+xml
    application/atom+xml
    font/truetype
    font/opentype
    application/vnd.ms-fontobject
    image/svg+xml;
  #access_log logs/access.log main;
  
  # HTTP server required to serve the player and HLS fragments
  server {
    listen 80;

    location / {
      auth_basic "Authentication (user=viewer)";
      auth_basic_user_file /.htpasswd;

      root /etc/nginx/html;
      index index.html index.htm;
    }

    location /manifest.webmanifest {
      auth_basic no;
      root /etc/nginx/html;
      index index.html index.htm;
    }
    # Serve HLS fragments
    location /hls {
      types {
        application/vnd.apple.mpegurl m3u8;
        video/mp2t ts;
      }
      
      root /mnt;

      add_header Cache-Control no-cache; # Disable cache
      
      # CORS setup
      add_header 'Access-Control-Allow-Origin' '*' always;
      add_header 'Access-Control-Expose-Headers' 'Content-Length';
      
      # allow CORS preflight requests
      if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        add_header 'Content-Length' 0;
        return 204;
      }
    }
    
    # Serve DASH fragments
    location /dash {
      types {
        application/dash+xml mpd;
        video/mp4 mp4;
      }

      root /mnt;
      
      add_header Cache-Control no-cache; # Disable cache


      # CORS setup
      add_header 'Access-Control-Allow-Origin' '*' always;
      add_header 'Access-Control-Expose-Headers' 'Content-Length';

      # Allow CORS preflight requests
      if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        add_header 'Content-Length' 0;
        return 204;
      }
    }		
    
    # This URL provides RTMP statistics in XML
    location /stat {
      rtmp_stat all;
      rtmp_stat_stylesheet stat.xsl; # Use stat.xsl stylesheet 
    }

    location /stat.xsl {
      # XML stylesheet to view RTMP stats.
      root /usr/local/nginx/html;
    }

  }
}